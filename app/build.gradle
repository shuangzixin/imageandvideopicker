apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.butterknife'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.1"
    defaultConfig {
        applicationId "com.app.imageandvideopicker"
        minSdkVersion 14
        targetSdkVersion 29
        versionCode 1
        versionName "1.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    //指定jdk版本
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation project(path: ':imageloader')
    annotationProcessor 'com.github.bumptech.glide:compiler:4.8.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.1.0'
}

//计算build执行时长
def startBuildTime, endBuildTime
//直接通过task函数去创建
task HelloTask(group: 'hello', description: 'task study') {
    println 'hello task'
    doFirst {
        println 'the group is :' + group
    }
}
//通过TaskContainer去创建Task
this.tasks.create(name: 'hellotask2') {
    println 'hello task2'
}
this.afterEvaluate {
    //保证要找的task已经执行完毕
    def preBuildTask = this.tasks.getByName('preBuild')
    preBuildTask.doFirst {
        startBuildTime = System.currentTimeMillis()
        println 'the start time is:' + startBuildTime
    }
    def buildTask = this.tasks.getByName('build')
    buildTask.doLast {
        endBuildTime = System.currentTimeMillis()
        println "the build time is:" + (endBuildTime - startBuildTime)
    }
}

task taskX {
    doLast {
        println 'taskX'
    }
}

task taskY {
    doLast {
        println 'taskY'
    }
}

task taskZ(dependsOn : [taskX, taskY]) {
    dependsOn this.tasks.findAll {
        task -> return task.name.startsWith('lib')
    }
    doLast {
        println 'taskZ'
    }
}

task lib1 {
    doLast {
        println 'lib1'
    }
}

task lib2 {
    doLast {
        println 'lib2'
    }
}

task nolib {
    doLast {
        println 'nolib'
    }
}

task handleReleaseFile {
    def srcFile = file('releases.xml')
    def destDir = new File(this.buildDir, 'generated/release/')
    doLast {
        println '开始解析对应的xml文件...'
        destDir.mkdir()
        def releases = new XmlParser().parse(srcFile)
        releases.release.each {
            releaseNode ->
                //解析每个release节点的内容
                def name = releaseNode.versionName.text()
                def versionCode = releaseNode.versionCode.text()
                def versionInfo = releaseNode.versionInfo.text()
                //创建文件并写入节点数据
                def destFile = new File(destDir, "release-${name}.text")
                destFile.withWriter {
                    writer ->
                        writer.write("${name} -> ${versionCode} -> ${versionInfo}")
                }
        }
    }
}

task handleReleaseFileTest(dependsOn : handleReleaseFile) {
    def destDir = fileTree(this.buildDir.path + 'generated/release/')
    doLast {
        destDir.each {

        }
    }
}
